<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ parameter name="RootNamespace" type="System.String" #>
<#@ parameter name="NLSResourceDirectory" type="System.String" #>
<#@ parameter name="NlsClassName" type="System.String" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Runtime.CompilerServices" #>
<#@ output extension=".cs" #>
// <autogenerated />
// This file was generated by a tool. Any changes made manually will be lost
// the next time this file is generated.

#nullable disable
namespace <#= RootNamespace #>
{
    using System.Collections.Generic;
    public static class <#= NlsClassName #>
    {
        private static string culture = System.Globalization.CultureInfo.CurrentCulture.Name;
        private static IReadOnlyDictionary<string, string> currentStrings;
        private static readonly Dictionary<string, Dictionary<string, string>> cultureDics = new Dictionary<string, Dictionary<string, string>>();

        static <#= NlsClassName #>()
        {
<#
var resDir = new DirectoryInfo(NLSResourceDirectory);
foreach (var file in resDir.EnumerateFiles("*.json"))
{
    var lang = file.Name.Split('.')[0];
#>
            cultureDics.Add("<#= lang #>", new Dictionary<string, string>()
            {
<#
    foreach (var (key, value) in EnumStrings(file.FullName))
    {
#>
                { "<#= key #>", "<#= value #>" },
<#
    
    }
#>
            });
<#
}
#>
            if (cultureDics.ContainsKey(culture))
            {
                currentStrings = cultureDics[culture];
            }
            else if (cultureDics.ContainsKey("en-US"))
            {
                currentStrings = cultureDics["en-US"];
            }
            else
            {
                currentStrings = cultureDics.Values.FirstOrDefault();
            }
        }

        public static event System.EventHandler<string> CultureChanged;

        public static string Get(string key)
        {
            var value = string.Empty;
            currentStrings?.TryGetValue(key, out value);
            return value;
        }

        public static bool SetCulture(string newCulture)
        {
            if (cultureDics.ContainsKey(newCulture))
            {
                currentStrings = cultureDics[newCulture];
                culture = newCulture;
                CultureChanged?.Invoke(null, newCulture);
                return true;
            }
            return false;
        }

<#
foreach (var (key, value) in EnumStrings(resDir.EnumerateFiles("*.json").Single(x => x.Name.StartsWith(System.Globalization.CultureInfo.CurrentCulture.Name)).FullName))
{
#>
        /// <summary>
        /// <#= System.Globalization.CultureInfo.CurrentCulture.Name #>: <#= value #>
        /// </summary>
        public static string <#= key #> => Get("<#= key #>");
<#
}
#>
    }
}

<#+
private IEnumerable<(string key, string value)> EnumStrings(string filePath)
{
    var lines = File.ReadAllLines(filePath, System.Text.Encoding.UTF8);
    foreach (var line in lines)
    {
        var match = Regex.Match(line, @"^\s*""(.+?)""\s*:\s*""(.+?)""\s*,?\s*$");
        if (match.Success)
        {
            yield return (match.Groups[1].Value, match.Groups[2].Value.Replace("<br/>", @"\n"));
        }
    }
}
#>